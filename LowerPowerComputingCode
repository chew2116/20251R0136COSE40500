# -*- coding: utf-8 -*-
"""PowerModellingAssignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b-fvG8msDEBLNWes77XFoOUjil7quRAe
"""

import pandas as pd
from sklearn.linear_model import LinearRegression

from google.colab import drive
drive.mount('/content/drive/')

# calling all cpu_usage for each core
cpu_core0 = pd.read_excel("/content/drive/MyDrive/LowPower/train/cpu/core0.xlsx")
cpu_core1 = pd.read_excel("/content/drive/MyDrive/LowPower/train/cpu/core1.xlsx")
cpu_core2 = pd.read_excel("/content/drive/MyDrive/LowPower/train/cpu/core2.xlsx")
cpu_core3 = pd.read_excel("/content/drive/MyDrive/LowPower/train/cpu/core3.xlsx")

cpu_core0.head()

# core0
frequency = 594
core_util_1 = cpu_core0['Core0 Util'].mean()
# (CPU0 + LCD) - LCD = 386.56 - 329.87
power_when_core_on = 56.69
s_on_off = 1

# cpu_core0 beta value in frequency 594 MHz
X_column = 'Core0 Util'
y_column = 'Measured Power'

# CPU Core0
X_core0 = cpu_core0[[X_column]]
y_core0 = cpu_core0[y_column]
model_core0 = LinearRegression()
model_core0.fit(X_core0, y_core0)
beta_core0 = model_core0.coef_[0]

print(f"Beta value for CPU Core 0: {beta_core0}")

#P_CPU_Core0
power_cpu_core0 = (beta_core0 * core_util_1) + (power_when_core_on * s_on_off)
power_cpu_core0

# core1
frequency = 594
core_util_1 = cpu_core1['Core1 Util'].mean()
# (CPU0+CPU1+LCD) - (CPU0-LCD) = 511.23 - 386.56 mW
power_when_core_on = 124.67

# cpu_core1 beta value in frequency 594 MHz
X_column = 'Core1 Util'
y_column = 'Measured Power'

# CPU Core 1
X_core1 = cpu_core1[[X_column]]
y_core1 = cpu_core1[y_column]
model_core1 = LinearRegression()
model_core1.fit(X_core1, y_core1)
beta_core1 = model_core1.coef_[0]
print(f"Beta value for CPU Core 1: {beta_core1}")

#P_CPU_Core1
p_lcd = 329.87
power_cpu_core1 = (beta_core1 * core_util_1) + (power_when_core_on * s_on_off)
power_cpu_core1 = power_cpu_core1 + power_cpu_core0 + p_lcd
power_cpu_core1

# core2
frequency = 594
core_util_2 = cpu_core2['Core2 Util'].mean()
# ( CPU0+CPU2+LCD ) - (CPU0 - LCD) = 525.50 mW - 386.56
power_when_core_on = 138.94

# cpu_core2 beta value in frequency 594 MHz
X_column = 'Core2 Util'
y_column = 'Measured Power'

# CPU Core 2
X_core2 = cpu_core2[[X_column]]
y_core2 = cpu_core2[y_column]
model_core2 = LinearRegression()
model_core2.fit(X_core2, y_core2)
beta_core2 = model_core2.coef_[0]
print(f"Beta value for CPU Core 2: {beta_core2}")

#P_CPU_Core2
power_cpu_core2 = (beta_core2 * core_util_2) + (power_when_core_on * s_on_off)
power_cpu_core2 = power_cpu_core2 + power_cpu_core0 + p_lcd
power_cpu_core2

# core3
frequency = 594
core_util_3 = cpu_core3['Core3 Util'].mean()
# ( CPU0+CPU3+LCD ) - (CPU0 - LCD) = 524.73 mW - 386.56
power_when_core_on = 138.17

# cpu_core3 beta value in frequency 384 MHz
X_column = 'Core3 Util'
y_column = 'Measured Power'

# CPU Core3
X_core3 = cpu_core3[[X_column]]
y_core3 = cpu_core3[y_column]
model_core3 = LinearRegression()
model_core3.fit(X_core3, y_core3)
beta_core3 = model_core3.coef_[0]
print(f"Beta value for CPU Core 3: {beta_core3}")

#P_CPU_Core3
power_cpu_core3 = (beta_core3 * core_util_3) + (power_when_core_on * s_on_off)
power_cpu_core3 = power_cpu_core3 + power_cpu_core0 + p_lcd
power_cpu_core3

power_cpu = power_cpu_core0 + power_cpu_core1 + power_cpu_core2 + power_cpu_core3
power_cpu

gpu_value = pd.read_excel('/content/drive/MyDrive/LowPower/train/gpu/GPU.xlsx')

gpu_value.head()

gpu = pd.read_excel('/content/drive/MyDrive/LowPower/train/gpu/GPU.xlsx', sheet_name = None)
gpu

beta_gpu_freq_128 = 2.5
average_gpu_util = gpu['128']['GPU Util'].mean()
freq = 128
beta_gpu_on = 90.8
power_gpu_freq_128 = (beta_gpu_freq_128  * average_gpu_util + beta_gpu_on) * s_on_off
power_gpu_freq_128

beta_gpu_freq_200 = 5.5
average_gpu_util = gpu['200']['GPU Util'].mean()
freq = 200
beta_gpu_on = 90.8
power_gpu_freq_200 = (beta_gpu_freq_200 * average_gpu_util + beta_gpu_on) * s_on_off
power_gpu_freq_200

beta_gpu_freq_325 = 7.5
average_gpu_util = gpu['325']['GPU Util'].mean()
freq = 325
beta_gpu_on = 90.8
power_gpu_freq_325 = (beta_gpu_freq_325 * average_gpu_util + beta_gpu_on )* s_on_off
power_gpu_freq_325

beta_gpu_freq_400 = 12.6
average_gpu_util = gpu['400']['GPU Util'].mean()
freq = 400
beta_gpu_on = 90.8
power_gpu_freq_400 = (beta_gpu_freq_400 * average_gpu_util + beta_gpu_on) * s_on_off
power_gpu_freq_400

power_lcd = 329.87
power_gpu = power_gpu_freq_128 + power_gpu_freq_200 + power_gpu_freq_325 + power_gpu_freq_400
power_gpu = power_gpu - power_cpu_core0 - power_lcd
power_gpu

display_value = pd.read_excel('/content/drive/MyDrive/LowPower/train/display/Display.xlsx')

X_column = 'Core0 Util'
y_column = 'Measured Power'

# Display
X_core = display_value[[X_column]]
y_core = display_value[y_column]
model_core = LinearRegression()
model_core.fit(X_core, y_core)
beta_display = model_core.coef_[0]
#beta_display = abs(beta_display)
print(f"Beta value for Display: {beta_display}")

brightness = display_value['Brightness'].mean()
power_display = (beta_display * brightness + power_lcd ) * s_on_off
power_display = power_display - power_cpu_core0 - p_lcd
power_display

audio_value = pd.read_excel('/content/drive/MyDrive/LowPower/train/audio/Audio.xlsx')

#audio_value.head()
#audio_value.info()
#audio_value.describe()

## audio beta value
X_column = 'Core0 Util'
y_column = 'Measured Power'

# audio
X_core = audio_value[[X_column]]
y_core = audio_value[y_column]
model_core = LinearRegression()
model_core.fit(X_core, y_core)
beta_audio = model_core.coef_[0]
print(f"Beta value for Audio: {beta_audio}")

power_audio = beta_audio * s_on_off
power_audio = power_audio - power_cpu_core0 - p_lcd
power_audio

gps_value = pd.read_excel('/content/drive/MyDrive/LowPower/train/gps/GPS.xlsx')

## gps beta value
X_column = 'Core0 Util'
y_column = 'Measured Power'

# audio
X_core = gps_value[[X_column]]
y_core = gps_value[y_column]
model_core = LinearRegression()
model_core.fit(X_core, y_core)
beta_gps = model_core.coef_[0]
print(f"Beta value for GPS: {beta_gps}")

power_gps = beta_gps * s_on_off
power_gps = power_gps - power_cpu_core0 - p_lcd
power_gps

wifi_value = pd.read_excel('/content/drive/MyDrive/LowPower/train/wifi/Wi-Fi.xlsx')

## wifi beta value
X_column = 'Core0 Util'
y_column = 'Measured Power'

beta_wifi_high = ''
beta_wifi_low = ''

# wifi
low_wifi = wifi_value[ wifi_value['WiFi Mode'] == 'Low']
X_core = low_wifi[[X_column]]
y_core = low_wifi[y_column]
model_core = LinearRegression()
model_core.fit(X_core, y_core)
beta_wifi_low = model_core.coef_[0]


high_wifi = wifi_value[ wifi_value['WiFi Mode'] == 'High']
X_core = high_wifi[[X_column]]
y_core = high_wifi[y_column]
model_core = LinearRegression()
model_core.fit(X_core, y_core)
beta_wifi_high = model_core.coef_[0]


print(f"Beta value for Wi-Fi (Low mode): {beta_wifi_low}")
print(f"Beta value for Wi-Fi (High mode): {beta_wifi_high}")

channel_rate = wifi_value['Channel rate'].mean()
data_rate = wifi_value['Data rate'].mean()
power_wifi = (beta_wifi_low + (58 - 0.768 * channel_rate) * data_rate)* s_on_off + (beta_wifi_high) * s_on_off
power_wifi = power_wifi - power_cpu_core0 - p_lcd
power_wifi

power_total = power_cpu + power_gpu + power_display + power_audio + power_gps + power_wifi
power_total
